#!/usr/bin/env python

import glob
import platform
import os
import subprocess
import sys

script_dir = os.path.dirname(__file__)
root = os.path.normpath(script_dir)
output_dir = os.path.join(os.path.abspath(root), 'out')

sys.path.insert(0, os.path.join(root, 'build', 'gyp', 'pylib'))
try:
  import gyp
except ImportError:
  print('You need to install gyp in build/gyp first. See the README.')
  sys.exit(42)


def host_arch():
  machine = platform.machine()
  if machine == 'i386': return 'ia32'
  if machine == 'x86_64': return 'x64'
  if machine.startswith('arm'): return 'arm'
  if machine.startswith('mips'): return 'mips'
  return machine  # Return as-is and hope for the best.


def run_cmd(args):
  proc = subprocess.Popen(args, stdout=subprocess.PIPE)
  ret = proc.communicate()[0].rstrip('\n')
  if proc.returncode != 0:
    print("Failed to run " + " ".join(args))
    sys.exit(43)
  return ret


def compiler_version():
  is_clang = 'clang' in run_cmd(CC.split() + ['--version'])
  proc = subprocess.Popen(CC.split() + ['-dumpversion'], stdout=subprocess.PIPE)
  version = proc.communicate()[0].split('.')
  version = map(int, version[:2])
  version = tuple(version)
  return (version, is_clang)


def run_gyp(args):
  rc = gyp.main(args)
  if rc != 0:
    print 'Error running GYP'
    sys.exit(rc)


if __name__ == '__main__':
  args = sys.argv[1:]

  args.append(os.path.join(os.path.abspath(root), 'ispdy.gyp'))
  common_fn  = os.path.join(os.path.abspath(root), 'common.gypi')
  options_fn = os.path.join(os.path.abspath(root), 'options.gypi')

  if os.path.exists(common_fn):
    args.extend(['-I', common_fn])

  if os.path.exists(options_fn):
    args.extend(['-I', options_fn])

  args.append('--depth=' + root)

  if 'iphoneos' not in args:
    sdk = 'macosx'
  else:
    sdk = 'iphoneos'
  sdk_path = run_cmd(['xcodebuild', '-version', '-sdk', sdk, 'Path'])
  args.extend(['-Dsdk=' + sdk])
  args.extend(['-Dsdk_path=' + sdk_path])

  sdk_dev_path = run_cmd(['xcode-select', '-print-path'])
  args.extend(['-Dsdk_dev_path=' + sdk_dev_path])

  CC = run_cmd(['xcrun', '-find', 'clang', '-sdk', sdk])
  os.environ['CC'] = CC;
  os.environ['CXX'] = run_cmd(['xcrun', '-find', 'clang++', '-sdk', sdk]);

  if '-f' not in args:
    args.extend('-f make'.split())
  if 'ninja' not in args:
    args.extend(['-Goutput_dir=' + output_dir])
    args.extend(['--generator-output', output_dir])
  (major, minor), is_clang = compiler_version()
  args.append('-Dgcc_version=%d' % (10 * major + minor))
  args.append('-Dclang=%d' % int(is_clang))

  if not any(a.startswith('-Dhost_arch=') for a in args):
    args.append('-Dhost_arch=%s' % host_arch())

  if not any(a.startswith('-Dtarget_arch=') for a in args):
    args.append('-Dtarget_arch=%s' % host_arch())

  if not any(a.startswith('-Dlibrary=') for a in args):
    args.append('-Dlibrary=static_library')

  if not any(a.startswith('-Dcomponent=') for a in args):
    args.append('-Dcomponent=static_library')

  gyp_args = list(args)
  print gyp_args
  run_gyp(gyp_args)
